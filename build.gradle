import org.ajoberstar.gradle.git.release.semver.*
import org.ajoberstar.gradle.git.release.opinion.Strategies

plugins {
    id 'java'
    id 'de.gliderpilot.semantic-release' version '1.2.0'
    id 'maven'
    id 'application'
}

group = "de.gliderpilot.gradle.semantic-release.test"

mainClassName = "de.gliderpilot.semanticrelease.test.Test"

def setExtValue(String property, String systemenv) {
    project.ext."$property" = project.hasProperty(property) ? project.getProperty(property) : System.getenv(systemenv)
}
setExtValue('ghToken', 'GH_TOKEN')

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
artifacts {
    sourcesJar
    javadocJar
}

jar {
    manifest {
        attributes([
                "main-class": mainClassName
        ])
    }
}
release {
    // add a second strategy to create release candidates from 'rc/.*' branches
    versionStrategy semanticRelease.releaseStrategy.copyWith(
        // the type is important, without type you would again replace the default strategy
        type: 'rc',
        selector: { SemVerStrategyState state ->
            !state.repoDirty && state.currentBranch.name ==~ /rc\/.*/ &&
                    semanticRelease.semanticStrategy.canRelease(state) && project.gradle.startParameter.taskNames.find { it == 'release' }
        },
        preReleaseStrategy: StrategyUtil.all({ it.copyWith(inferredPreRelease: 'rc') } as PartialSemVerStrategy, Strategies.PreRelease.COUNT_INCREMENTED)
    )

}
semanticRelease {
    repo {
        ghToken = project.ext.ghToken
        releaseAsset jar, contentType: 'application/zip'
        releaseAsset sourcesJar, label: 'the sources of the project', contentType: 'application/zip'
        releaseAsset javadocJar, label: 'the javadoc of the project', contentType: 'application/zip'
    }
}
